datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ***********************************유저 정보*******************************************

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String
  age           String?
  gender        Gender    @default(U)
  role          Role      @default(USER)

  accounts       Account[]
  articles       Article[]
  market_reviews MarketReview[]

  @@map("users")
}

enum Gender {
  F
  M
  U
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// ***********************************아티클 정보*******************************************
model Article {
  id         Int      @id @default(autoincrement())
  title      String   @db.VarChar(255)
  body       String   @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  ArticleHashTag ArticleHashTag[]

  @@map("articles")
}

model HashTag {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)

  ArticleHashTag ArticleHashTag[]

  @@map("hashtag")
}

model ArticleHashTag {
  articleId Int @map("article_id")
  hashtagId Int @map("hashtag_id")

  article Article @relation(fields: [articleId], references: [id])
  hashtag HashTag @relation(fields: [hashtagId], references: [id])

  @@id([articleId, hashtagId])
  @@map("article_hashtag")
}

// ***********************************식당 정보*******************************************
model Market {
  id           Int     @id @default(autoincrement())
  name         String  @db.VarChar(255)
  information  String  @db.Text
  address      String  @db.VarChar(255)
  phone        String? @db.VarChar(255)
  businessTime String? @db.VarChar(255)
  homepage     String? @db.VarChar(255)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  market_reviews MarketReview[]
  market_images  MarketImage[]
  market_menus   MarketMenu[]

  @@map("markets")
}

model MarketMenu {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String?  @db.VarChar(255)
  price       Int
  label       String?  @db.VarChar(255) // 대표메뉴, 추천메뉴, 신메뉴 등
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  marketId Int
  market   Market @relation(fields: [marketId], references: [id], onDelete: Cascade)

  @@map("market_menus")
}

model MarketImage {
  id         Int      @id @default(autoincrement())
  url        String   @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  marketId Int
  market   Market @relation(fields: [marketId], references: [id], onDelete: Cascade)

  @@map("market_images")
}

model MarketReview {
  id         Int      @id @default(autoincrement())
  rating     Float
  review     String   @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  marketId Int
  market   Market @relation(fields: [marketId], references: [id], onDelete: Cascade)

  @@map("market_reviews")
}
